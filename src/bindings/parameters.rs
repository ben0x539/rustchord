/* automatically generated by rust-bindgen 0.56.0 */

pub const PARAM_BUFF: u32 = 160;
pub const ParamType_NONE: ParamType = 0;
pub const ParamType_PAFLOAT: ParamType = 1;
pub const ParamType_PAINT: ParamType = 2;
pub const ParamType_PASTRING: ParamType = 3;
pub const ParamType_PABUFFER: ParamType = 4;
pub const ParamType_NUM_PARAMS: ParamType = 5;
pub type ParamType = ::std::os::raw::c_uint;
pub type ParamCallbackT =
    ::std::option::Option<unsafe extern "C" fn(v: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamCallback {
    pub t: ParamCallbackT,
    pub v: *mut ::std::os::raw::c_void,
    pub next: *mut ParamCallback,
}
#[test]
fn bindgen_test_layout_ParamCallback() {
    assert_eq!(
        ::std::mem::size_of::<ParamCallback>(),
        24usize,
        concat!("Size of: ", stringify!(ParamCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamCallback>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamCallback),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamCallback>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamCallback),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamCallback>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamCallback),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkedParameter {
    pub ptr: *mut ::std::os::raw::c_void,
    pub lp: *mut LinkedParameter,
}
#[test]
fn bindgen_test_layout_LinkedParameter() {
    assert_eq!(
        ::std::mem::size_of::<LinkedParameter>(),
        16usize,
        concat!("Size of: ", stringify!(LinkedParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<LinkedParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(LinkedParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LinkedParameter>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LinkedParameter),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LinkedParameter>())).lp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LinkedParameter),
            "::",
            stringify!(lp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Param {
    pub orphan: ::std::os::raw::c_char,
    pub t: ParamType,
    pub size: ::std::os::raw::c_int,
    pub lp: *mut LinkedParameter,
    pub callback: *mut ParamCallback,
}
#[test]
fn bindgen_test_layout_Param() {
    assert_eq!(
        ::std::mem::size_of::<Param>(),
        32usize,
        concat!("Size of: ", stringify!(Param))
    );
    assert_eq!(
        ::std::mem::align_of::<Param>(),
        8usize,
        concat!("Alignment of ", stringify!(Param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).orphan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(orphan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).t as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Param), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).lp as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Param), "::", stringify!(lp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).callback as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(callback)
        )
    );
}
extern "C" {
    pub fn RegisterValue(
        name: *const ::std::os::raw::c_char,
        arg1: ParamType,
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DumpParameters();
}
extern "C" {
    pub fn GetParameterF(name: *const ::std::os::raw::c_char, defa: f32) -> f32;
}
extern "C" {
    pub fn GetParameterI(
        name: *const ::std::os::raw::c_char,
        defa: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetParameterS(
        name: *const ::std::os::raw::c_char,
        defa: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetParametersFromString(string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn AddCallback(
        name: *const ::std::os::raw::c_char,
        t: ParamCallbackT,
        v: *mut ::std::os::raw::c_void,
    );
}
